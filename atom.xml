<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://timestarry.github.io</id>
    <title>光溯星河的复习笔记</title>
    <updated>2024-10-25T12:32:20.278Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://timestarry.github.io"/>
    <link rel="self" href="https://timestarry.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://timestarry.github.io/images/avatar.png</logo>
    <icon>https://timestarry.github.io/favicon.ico</icon>
    <rights>All rights reserved 2024, 光溯星河的复习笔记</rights>
    <entry>
        <title type="html"><![CDATA[IO多路复用]]></title>
        <id>https://timestarry.github.io/post/os-io-multiuse/</id>
        <link href="https://timestarry.github.io/post/os-io-multiuse/">
        </link>
        <updated>2024-10-25T06:47:28.000Z</updated>
        <content type="html"><![CDATA[<h1 id="为什么需要io多路复用">为什么需要I/O多路复用</h1>
<p>IO多路复用的本质是为了提升操作系统维护对外连接的能力，在尽可能节省资源的同时，在网络编程中提升操作系统维护Socket的能力。</p>
<p>在基础的TCP Socket通信模型下，服务端和客户端会分别通过Socket建立一对一的连接，大致流程如下：</p>
<ul>
<li>服务端创建Socket（可选网络层和传输层协议），并使用<code>bind()</code>绑定IP和端口，启动调用<code>listen()</code>开始监听连接</li>
<li>客户端创建Socket（可选网络层和传输层协议），使用<code>connect()</code>建立连接</li>
<li>接下来进行TCP三次握手，完成后，服务端使用<code>accept()</code>从TCP全连接队列中取出该socket，进行数据传输</li>
</ul>
<p>这个过程中，服务端的进程会通过自己的文件描述符数组找到自己在内核中的Socket数据结构，其中包含一个发送队列和一个接收队列，两个队列里存放了许多<code>sk_buff</code>，它们由链表的形式进行组织。</p>
<p><strong>多进程模型</strong>：如果我们需要让服务器连接多个客户端，最简单的方案便是创建多个进程，父进程使用<code>fork()</code>创建和自己一样的子进程。在创建时，两个进程除了返回值是一模一样的，这就包括了指向Socket的文件描述符，即子进程可以使用父进程的“已连接Socket”进行通信。</p>
<p>但这一模型下存在一个巨大的问题，便是资源消耗。进程有自己独立的地址空间，包括虚拟内存、进程栈、内核堆栈等等资源，多进程的上下文切换代价极大。此外，子进程退出时，如有未被及时回收的子进程资源便会产生大量僵尸进程，消耗系统资源，这时我们便会考虑代价更小的多线程模型。</p>
<p><strong>多线程模型</strong>：总所周知，同一进程内的线程会共享线程栈以外的一切资源，包括文件描述符列表、代码、全局数据等等，其资源消耗和上下文切换代价比进程要小得多。当然，在网络连接的场景下，频繁创建和销毁大量线程的代价也决不可小觑，这时我们便可以考虑使用线程池。</p>
<p>父进程可以通过创建一个队列（注意线程安全），将<code>accept()</code>取得的已连接Socket连接放入该队列中，线程池则从其中取出已连接Socket进行处理。但当服务器需要维护的连接达到更大规模时（参考C10K），大量线程带来的消耗也是相当恐怖的。</p>
<p>这时我们便会想能否使用一种方式无需创建大量进程或线程，以更小的代价让操作系统维护更多的连接？</p>
<h1 id="io多路复用">I/O多路复用</h1>
<p>I/O多路复用（Input/Output Multiplexing）是一种在单个线程中管理多个输入/输出通道的技术。它允许一个线程同时监听多个输入流（比如文件描述符），并在有数据可读或可写时进行相应的处理，而不需要为每个通道创建一个独立的线程。</p>
<p>常见的I/O多路复用机制包括select、poll和epoll.</p>
<h2 id="select">select</h2>
<p><strong>数据结构</strong>：<code>bitsmap[FD_SETSIZE]</code></p>
<p><strong>fd检查</strong>：轮询</p>
<p><strong>应用场景</strong>：低并发需求，有少量的fd需要监控</p>
<p>select会将已连接的Socket文件描述符集合<strong>拷贝</strong>到内核空间，内核<strong>遍历</strong>整个Socket集合检查连接中是否有网络事件发生，并标记该Socket为可读或可写，然后将这个集合整个<strong>拷贝</strong>回用户空间，在用户空间中<strong>再次遍历</strong>找到那些被标记的Socket，并进行处理。</p>
<p>整个过程发生了2次拷贝和两次遍历，随着文件描述符的增加，其性能会线性下降（线性数据结构遍历<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>、反复拷贝操作）；</p>
<p>select表示文件描述符集合的数据结构是<strong>固定长度的BitsMap</strong>，大小由内核<code>FD_SETSIZE</code>宏定义，默认值为1024，即select最多可以监听0~1023的文件描述符。</p>
<h2 id="poll">poll</h2>
<p><strong>数据结构</strong>：结构体数组</p>
<p><strong>fd检查</strong>：轮询</p>
<p><strong>应用场景</strong>：低并发需求，有大量的fd需要监控</p>
<p>poll在select的基础上将底层数据结构改为结构体数组，解决了select文件描述符上限的问题。由此，在连接数较多时，性能会优于select。</p>
<h2 id="epoll">epoll</h2>
<p><strong>数据结构</strong>：红黑树</p>
<p><strong>fd检查</strong>：事件驱动</p>
<p><strong>应用场景</strong>：高并发需求，有大量fd需要监控，fd活跃数较低</p>
<p>epoll在内核中维护了一个红黑树。调用<code>epoll_ctl()</code>将需要监控的socket放入内核的数据结构中，解决了select/poll每次都完整拷贝整个数据结构和时间复杂度高的问题（红黑树增删改效率一般为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">O(logn)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>）。</p>
<p>epoll引入了事件驱动机制和回调机制。epoll在内核中维护了一个就绪队列，仅在fd状态有改变时才会触发回调，当用户调用 <code>epoll_wait()</code> 函数时，只会返回有事件发生的文件描述符的个数。解决了select/poll完整轮询遍历整个socket列表的问题，且在fd活跃数较低时，epoll优势更加明显。</p>
<h3 id="epoll的事件触发">epoll的事件触发</h3>
<p>epoll支持两种事件触发模式：<strong>水平触发（level-triggered，LT）<strong>和</strong>边缘触发（edge-triggered，ET）</strong>。</p>
<table>
<thead>
<tr>
<th></th>
<th>水平触发（LT）</th>
<th>边缘触发（ET）</th>
</tr>
</thead>
<tbody>
<tr>
<td>触发条件</td>
<td>只要文件描述符（fd）对应的事件条件满足（如缓冲区有数据可读或可写），每次调用<code>epoll_wait</code>都会触发。</td>
<td>只有在fd状态发生变化的边缘时刻触发，如从不可读变为可读、从不可写变为可写时触发，之后状态不变则不再触发（除非再次变化）。</td>
</tr>
<tr>
<td>事件通知频率</td>
<td>相对较高。如果应用程序处理事件不及时，会频繁收到相同事件的通知。</td>
<td>相对较低。只有状态改变边缘才触发，减少了不必要的通知。</td>
</tr>
<tr>
<td>编程难度</td>
<td>较简单。开发人员可以按照自己的节奏处理事件，不用担心错过事件，因为会持续收到通知。</td>
<td>较复杂。要求应用程序在一次触发后尽可能完整地处理相关事件，否则可能错过事件，需要更精细的编程逻辑。</td>
</tr>
<tr>
<td>适用场景</td>
<td>适用于简单的网络编程场景或对性能要求不是极高，处理事件速度能跟上的情况。</td>
<td>适用于高并发、高性能要求的场景，如大型网络服务器，能有效降低系统开销。</td>
</tr>
<tr>
<td>数据处理方式</td>
<td>可以每次处理部分数据，剩余数据下次调用<code>epoll_wait</code>时还会收到通知。</td>
<td>通常需要在一次触发后循环处理数据，尽量一次性处理完所有相关数据，否则可能遗漏。</td>
</tr>
</tbody>
</table>
<h1 id="参考阅读">参考阅读</h1>
<ul>
<li>
<p><a href="https://xiaolincoding.com/os/8_network_system/selete_poll_epoll.html">9.2 I/O 多路复用：select/poll/epoll | 小林coding</a></p>
</li>
<li>
<p><a href="https://blog.csdn.net/m0_67318913/article/details/138442134">什么是IO 多路复用（超详细-读这一篇就够）_io多路复用是什么-CSDN博客</a></p>
</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[线程同步：锁、条件变量、信号量]]></title>
        <id>https://timestarry.github.io/post/os-thread-sync/</id>
        <link href="https://timestarry.github.io/post/os-thread-sync/">
        </link>
        <updated>2024-10-23T13:58:14.000Z</updated>
        <content type="html"><![CDATA[<p>不同于进程拥有独立的地址，同一进程内的线程除了线程栈外其他数据都是共享的，所以我们要着重关注线程安全问题。线程安全技术包括<strong>原子操作</strong>和<strong>线程同步</strong>。原子操作通过确保不可分割的汇编指令实现了线程执行的安全性，这种方法高效，但只适用于较为简单的场景，例如修改某个变量、实现计数等场景。本文着重关注线程同步的方法。</p>
<p>在多线程编程中，线程同步是保证多个线程能够正确、安全地访问共享资源的关键技术。由于线程的调度是不确定的，不加控制的并发访问可能会导致数据竞争（race condition），最终引发不可预测的错误或崩溃。</p>
<p>由此，<strong>线程同步的核心目标是确保多个线程对共享资源的访问是有序的、互斥的，防止多个线程同时对同一个资源进行读写操作而导致数据不一致或资源破坏</strong>。</p>
<p>针对不同的场景，我们常用这些手段来实现线程同步：<strong>锁</strong>、<strong>信号量</strong>、<strong>条件变量</strong>。</p>
<h1 id="锁">锁</h1>
<p>锁（Lock）是最常见的线程同步机制，用于保证同一时刻只有一个线程能访问共享资源。锁通过保护临界区（critical section）来防止多个线程同时修改共享数据，从而避免数据竞争。</p>
<p>常见的锁类型包括：互斥锁（mutex）、读写锁（read-write lock）、自旋锁（spinlock）。互斥锁是最基本的线程同步原语，读写锁和自旋锁分别针对大量读场景和短时间持有锁两种情况做了特定优化，在实际编程中应根据具体场景选择锁类型。</p>
<h2 id="互斥锁">互斥锁</h2>
<p>互斥锁是最基本的锁机制，一个线程获得锁后，其他线程必须等待，直到锁被释放。互斥锁保证了同一时间只有一个线程能够访问共享资源。</p>
<p><strong>实现用例</strong></p>
<pre><code class="language-cpp">#include &lt;iostream&gt;
#include &lt;thread&gt;
#include &lt;mutex&gt;

std::mutex mtx;  // 定义互斥锁
int count = 0;

void increment() {
    for (int i = 0; i &lt; 100000; ++i) {
        // 通过加锁保证了count在同一时刻仅会被一个线程操作，但每次count计数都会加锁解锁，将导致严重的性能问题
        mtx.lock();
        ++count;
        mtx.unlock();
    }
}

int main() {
    std::thread t1(increment);
    std::thread t2(increment);

    t1.join();
    t2.join();

    std::cout &lt;&lt; &quot;Final count: &quot; &lt;&lt; count &lt;&lt; std::endl;
}
</code></pre>
<p><strong>优点</strong></p>
<ul>
<li><strong>简单</strong>：实现简单，易于理解；</li>
<li><strong>保护临界资源</strong>：有效地保护临界区，确保同一时间只有一个线程可以访问共享资源。</li>
</ul>
<p><strong>缺点</strong></p>
<ul>
<li><strong>可能导致死锁</strong>：如果线程在持有A锁的情况下等待B锁，而B锁又被另一个线程持有，并且也在等待A锁，这将会产生死锁；</li>
<li><strong>性能消耗</strong>：频繁地锁定和解锁操作会造成性能开销；</li>
<li><strong>优先级反转</strong>：高优先级进程可能会因为等待低优进程释放锁而阻塞，导致性能下降。</li>
</ul>
<h2 id="读写锁">读写锁</h2>
<p>读写锁有三种状态：读锁、写锁、不加锁。</p>
<ol>
<li>某线程申请了<strong>读锁</strong>：其他线程可以再申请读锁，但不能申请写锁；</li>
<li>某线程申请了<strong>写锁</strong>：其他线程不允许申请读锁或写锁，即独占锁。</li>
</ol>
<p><strong>优点</strong></p>
<ul>
<li><strong>提高并发性</strong>：允许多个读操作同时进行，只在写操作时才完全互斥，适用于读多写少的场景；</li>
<li><strong>分离读写控制</strong>：读写锁能够更好地控制对共享资源的访问，读操作不会阻塞其他读操作。</li>
</ul>
<p><strong>缺点</strong></p>
<ul>
<li><strong>复杂度</strong>：相对于互斥锁，读写锁的实现和使用较为复杂；</li>
<li><strong>写操作饥饿</strong>：如果持续有读操作，写操作可能会长时间等待，导致写操作“饥饿”。</li>
</ul>
<h2 id="自旋锁">自旋锁</h2>
<p>自旋锁与互斥锁类似，但是它不会使线程进入阻塞状态，而是持续循环检测锁的状态（轮询），直到获取锁。</p>
<p><strong>优点</strong></p>
<ul>
<li><strong>无阻塞</strong>：线程在尝试获取锁时不会进行上下文切换，适用于锁只会被持有很短时间的场景；</li>
<li><strong>避免线程切换</strong>：由于线程不会进入睡眠状态，因此可以减少线程切换的开销。</li>
</ul>
<p><strong>缺点</strong></p>
<ul>
<li><strong>CPU消耗</strong>：如果锁被持有时间较长，自旋锁会导致CPU空转，浪费处理器资源；</li>
<li><strong>不公平</strong>：某些自旋锁的实现可能导致线程饥饿或优先级反转问题。</li>
</ul>
<h1 id="条件变量">条件变量</h1>
<p>条件变量允许线程等待某个条件满足后再继续执行，常用于生产者-消费者问题。它结合互斥锁一起使用，等待线程在条件满足时被唤醒，解决了互斥锁仅有锁定或非锁定两种状态的问题。</p>
<p><strong>实现用例：在C++中引入条件变量</strong></p>
<ol>
<li>包含头文件 <code>&lt;condition_variable&gt;</code> 和 <code>&lt;mutex&gt;</code>；</li>
<li>创建一个互斥锁 <code>std::mutex</code> 和一个条件变量 <code>std::condition_variable</code>；</li>
<li>在需要等待条件的线程中，首先锁定互斥锁，然后检查条件是否满足。如果不满足条件，则调用条件变量的 <code>wait</code> 方法，同时会自动解锁互斥锁，使其他线程可以访问共享资源。当其他线程通知条件变量时，等待的线程会被唤醒，并重新锁定互斥锁；</li>
<li>在通知条件的线程中，锁定互斥锁，修改共享资源使得条件满足，然后调用条件变量的 <code>notify_one</code> 或 <code>notify_all</code> 方法来通知等待的线程。</li>
</ol>
<pre><code class="language-cpp">/* 
生产者线程不断生产数据并放入队列中，当队列满时，生产者线程等待。消费者线程不断从队列中取出数据，当队列为空时，消费者线程等待。通过条件变量和互斥锁的配合，实现了生产者和消费者的同步。
*/

#include &lt;iostream&gt;
#include &lt;thread&gt;
#include &lt;mutex&gt;
#include &lt;condition_variable&gt;
#include &lt;queue&gt;

// 互斥锁，用于保护共享资源 data_queue
std::mutex mutex_;
// 条件变量，用于线程间的等待和通知
std::condition_variable condition_;
// 存储数据的队列，作为生产者和消费者共享的资源
std::queue&lt;int&gt; data_queue;
// 队列的最大容量
const int max_queue_size = 5;

// 生产者函数
void producer() {
    for (int i = 0; i &lt; 10; ++i) {
        // 创建 unique_lock，在构造时自动锁定互斥锁
        std::unique_lock&lt;std::mutex&gt; lock(mutex_);
        // 当队列已满时，等待条件变量的通知
        while (data_queue.size() == max_queue_size) {
            condition_.wait(lock);
        }
        // 将数据放入队列
        data_queue.push(i);
        std::cout &lt;&lt; &quot;Produced: &quot; &lt;&lt; i &lt;&lt; std::endl;
        // 通知消费者线程，可能有数据可供消费了
        condition_.notify_one();
    }
}

// 消费者函数
void consumer() {
    while (true) {
        // 创建 unique_lock，在构造时自动锁定互斥锁
        std::unique_lock&lt;std::mutex&gt; lock(mutex_);
        // 当队列为空时，等待条件变量的通知
        while (data_queue.empty()) {
            condition_.wait(lock);
        }
        // 取出队列中的数据
        int data = data_queue.front();
        data_queue.pop();
        std::cout &lt;&lt; &quot;Consumed: &quot; &lt;&lt; data &lt;&lt; std::endl;
        // 通知生产者线程，可能有空间可以生产新数据了
        condition_.notify_one();
    }
}

int main() {
    // 创建生产者线程并执行 producer 函数
    std::thread producer_thread(producer);
    // 创建消费者线程并执行 consumer 函数
    std::thread consumer_thread(consumer);

    // 等待生产者线程结束
    producer_thread.join();
    // 等待消费者线程结束
    consumer_thread.join();

    return 0;
}
</code></pre>
<h1 id="信号量">信号量</h1>
<p>信号量（Semaphore）用于控制访问资源的线程数量，常用于限制某一资源的并发访问次数。C++ 标准库中没有直接提供信号量，应通过第三方库或者使用自定义实现。</p>
<p><strong>分类</strong></p>
<ul>
<li><strong>二元信号量（Binary Semaphore）</strong>：与互斥锁类似，值只允许为 0 或 1，用于确保只有一个线程访问资源；</li>
<li><strong>计数信号量（Counting Semaphore）</strong>：可以允许多个线程同时访问，信号量的值表示可供访问的资源数量。</li>
</ul>
<p><strong>与锁的关系</strong></p>
<ul>
<li>锁主要是为了互斥，保证只有一个线程能访问资源；信号量则可以限制多个线程并发访问，适合资源有限的场景；</li>
<li>信号量在控制资源数量时更加灵活，而锁一般用于单一资源的保护。</li>
</ul>
<p><strong>自定义信号量实现</strong></p>
<p>实现一个基本的信号量基类应包含这些能力：计数、获取、释放。</p>
<pre><code class="language-cpp">#include &lt;iostream&gt;
#include &lt;thread&gt;
#include &lt;mutex&gt;
#include &lt;condition_variable&gt;
#include &lt;vector&gt;

// 信号量类
class Semaphore {
private:
    std::mutex mutex_;             // 互斥锁，用于同步对计数的访问
    std::condition_variable condition_; // 条件变量，用于线程等待和通知
    size_t count_;                 // 计数，表示可用资源的数量

public:
    // 构造函数，初始化信号量计数
    Semaphore(size_t count = 1) : count_(count) {}

    // 获取信号量，减少计数，如果计数小于等于0，则线程等待
    void acquire() {
        std::unique_lock&lt;std::mutex&gt; lock(mutex_);
        // 使用条件变量的wait函数等待，直到计数大于0
        condition_.wait(lock, [this] { return count_ &gt; 0; });
        // 减少计数，表示获取了一个资源
        --count_;
    }

    // 释放信号量，增加计数，并通知一个等待的线程
    void release() {
        std::lock_guard&lt;std::mutex&gt; lock(mutex_);
        // 增加计数，表示释放了一个资源
        ++count_;
        // 通知一个等待的线程（如果有）
        condition_.notify_one();
    }
};

int shared_resource = 0; // 共享资源
Semaphore semaphore(3); // 信号量，允许最多3个线程同时访问资源

// 工作线程函数
void worker() {
    semaphore.acquire(); // 获取信号量，进入临界区
    // 执行一些操作，比如增加共享资源
    std::cout &lt;&lt; &quot;Thread &quot; &lt;&lt; std::this_thread::get_id() &lt;&lt; &quot; is accessing the shared resource.&quot; &lt;&lt; std::endl;
    ++shared_resource; // 增加共享资源的值
    std::this_thread::sleep_for(std::chrono::seconds(1)); // 模拟耗时操作
    semaphore.release(); // 释放信号量，离开临界区
}

int main() {
    std::vector&lt;std::thread&gt; threads; // 存储线程的向量
    // 创建并启动多个线程
    for (int i = 0; i &lt; 10; ++i) {
        threads.emplace_back(worker);
    }

    // 等待所有线程完成
    for (auto&amp; thread : threads) {
        thread.join();
    }

    // 打印共享资源的最终值
    std::cout &lt;&lt; &quot;Final value of shared resource: &quot; &lt;&lt; shared_resource &lt;&lt; std::endl;
    return 0;
}
</code></pre>
<h1 id="参考阅读">参考阅读</h1>
<ul>
<li><a href="https://zhuanlan.zhihu.com/p/461063930">线程同步的几种方式 - 知乎 (zhihu.com)</a></li>
<li><a href="https://tech.meituan.com/2024/07/19/multi-threading-and-multi-thread-synchronization.html">基本功 | 一文讲清多线程和多线程同步 - 美团技术团队 (meituan.com)</a></li>
<li><a href="https://www.bilibili.com/video/BV1oQ4y1C73G/">多线程编程：一次性搞懂线程同步机制_哔哩哔哩_bilibili</a></li>
<li><a href="https://developer.aliyun.com/article/1279863">线程池的信号量-阿里云开发者社区 (aliyun.com)</a></li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[栈与队列]]></title>
        <id>https://timestarry.github.io/post/ds-stack-queue/</id>
        <link href="https://timestarry.github.io/post/ds-stack-queue/">
        </link>
        <updated>2024-10-23T02:15:52.000Z</updated>
        <content type="html"><![CDATA[<h1 id="栈">栈</h1>
<p>栈（Stack）是先进后出的数据结构，我们可以将其想象为一个杯子，入栈就是不断往杯子中放入大小合适的小球，出栈时需要将小球从上至下一个个取出。</p>
<p>由此带来的访问入栈（push）、栈顶元素（top）、弹出栈顶（pop）时间复杂度都是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mn>1</mn><mo>)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span>.</p>
<h2 id="栈的常见应用场景">栈的常见应用场景</h2>
<ul>
<li>程序内存管理：函数栈，用于记录函数的上下文信息；</li>
<li>撤销与重做：撤销操作时将操作入栈，重做时将撤销的操作一个个出栈。</li>
</ul>
<h2 id="栈的两种实现方式">栈的两种实现方式</h2>
<p>我们可以使用数组或链表来实现栈，两种实现方式可以完成的栈功能都是一致的，但由于两种基本数据结构特性的不同，在部分操作的性能上存在差异。</p>
<p>使用数组实现时，为避免手动处理扩容问题，应使用动态数组实现。</p>
<p>两种实现方式的简单对比：</p>
<table>
<thead>
<tr>
<th></th>
<th>数组实现（数组尾部作栈顶）</th>
<th>链表实现（链表头节点作栈顶）</th>
</tr>
</thead>
<tbody>
<tr>
<td>入栈（<code>push</code>）</td>
<td>添加尾部元素（<code>push_back</code>）</td>
<td>添加头节点（<code>new-&gt;next = head;head = new-&gt;next</code>）</td>
</tr>
<tr>
<td>访问栈顶（<code>top</code>）</td>
<td>访问尾部元素（<code>back</code>）</td>
<td>访问头节点（<code>head-&gt;val</code>）</td>
</tr>
<tr>
<td>出栈（<code>pop</code>）</td>
<td>删除尾部元素（<code>pop_back</code>）</td>
<td>删除头节点（<code>head = head-&gt;next;delete</code>）</td>
</tr>
<tr>
<td>时间效率</td>
<td>出入栈操作涉及到的内存均已预先分配，操作效率较高；但入栈时若超出数组容量会触发数组扩容，导致该次入栈操作时间复杂度变为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>，不过由于扩容是低频操作，平均效率较高。</td>
<td>链表不存在数组扩容的问题，但元素入栈需要初始化节点对象并修改指针，效率较低，若入栈元素本身就是节点对象则可省去初始化操作，提高效率。平均效率表现更稳定。</td>
</tr>
<tr>
<td>空间效率</td>
<td>初始化数组的空间可能是超出需求的，扩容机制按2倍或其它倍率扩容时也可能导致过多的空间浪费。</td>
<td>链表节点需要额外存储指针。两者具体空间效率要具体情况具体分析。</td>
</tr>
</tbody>
</table>
<h2 id="stl-stack">STL stack</h2>
<p>C++STL stack容器提供如下操作：</p>
<table>
<thead>
<tr>
<th>STL 函数</th>
<th>描述</th>
<th>操作时间复杂度</th>
</tr>
</thead>
<tbody>
<tr>
<td>empty()</td>
<td>判断栈是否为空</td>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mn>1</mn><mo>)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></td>
</tr>
<tr>
<td>size()</td>
<td>返回栈中元素的个数</td>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mn>1</mn><mo>)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></td>
</tr>
<tr>
<td>top()</td>
<td>返回栈顶元素</td>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mn>1</mn><mo>)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></td>
</tr>
<tr>
<td>push(element)</td>
<td>将元素压入栈顶</td>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mn>1</mn><mo>)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></td>
</tr>
<tr>
<td>pop()</td>
<td>弹出栈顶元素</td>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mn>1</mn><mo>)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></td>
</tr>
</tbody>
</table>
<h1 id="队列">队列</h1>
<p>队列（Queue）是先进先出的数据结构，如同排队一样，我更喜欢将其想象为两端开口的管道，入队便是向管道入口放入小球，出队便是从管道出口取出小球，管道两端分别是只允许入或出的队尾和队首。</p>
<p>由此带来的入队（push）、访问队首（front）、出队（pop）时间复杂度均为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mn>1</mn><mo>)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span>.</p>
<h2 id="队列的常见应用场景">队列的常见应用场景</h2>
<ul>
<li>进程调度：例如，就绪队列中存储着处于就绪状态等待被调度执行的进程，当 CPU 空闲时，操作系统从就绪队列中选择一个进程进行执行；</li>
<li>消息队列：在分布式 Web 服务架构中，不同的服务组件之间可以通过消息队列进行通信。例如，订单服务在处理完一个订单后，可以将订单处理完成的消息放入消息队列。</li>
</ul>
<h2 id="队列的两种实现方式">队列的两种实现方式</h2>
<p>使用链表实现队列的思路比较常规，初始化头（front）尾（rear）节点，指向队列的头尾，并且规定队尾仅可添加，队首仅可删除，记录出入队记录队列长度（size）即可。</p>
<p>但<em><strong>Hello-algo</strong></em>中使用数组实现就比较妙了，它采用的方式是<strong>环形数组</strong>，所以这里着重讲一下环形数组实现队列的方法。示例实现这一方法时采用了<code>queCapacity</code>描述队列容量，即数组上限，当然也可采用动态数组的形式进行扩容。</p>
<h3 id="环形数组实现队列">环形数组实现队列</h3>
<p>使用数组实现队列时需要考虑解决这两个问题：</p>
<ul>
<li>在数组中删除首元素的时间复杂度为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>（删除并移动元素），可以使用队首指针front和长度size对队列有效范围进行规定，然后定义队尾<code>rear = front + size</code>，如此数组中队列的有效区间便为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>[</mo><mi>f</mi><mi>r</mi><mi>o</mi><mi>n</mi><mi>t</mi><mo separator="true">,</mo><mi>r</mi><mi>e</mi><mi>a</mi><mi>r</mi><mo>−</mo><mn>1</mn><mo>]</mo></mrow><annotation encoding="application/x-tex">[front, rear - 1]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">o</span><span class="mord mathdefault">n</span><span class="mord mathdefault">t</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">e</span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span></span></span></span>；</li>
<li>在不断的出入队过程中，front和rear移动到数组的尾部时将无法继续移动，解决方案是将数组视为首尾相接的<strong>环形数组</strong>。具体操作是让front或rear越过数组尾部时回到数组头部继续遍历，方法是取余。</li>
</ul>
<pre><code class="language-cpp">// 基于环形数组实现的队列
class ArrayQueue {
private:
    int* nums;       // 用于存储队列元素的数组
    int front;       // 队首指针，指向队首元素
    int queSize;     // 队列长度
    int queCapacity; // 队列容量

public:
    ArrayQueue(int capacity) {
        // 初始化队列
        nums = new int[capacity];
        front = 0;
        queSize = 0;
        queCapacity = capacity;
    }

    ~ArrayQueue() {
        delete[] nums;
    }

    // 队列容量
    int capacity() {
        return queCapacity;
    }

    // 队列大小
    int size() {
        return queSize;
    }

    // 队列是否为空
    bool empty() {
        if (queSize == 0) return true;
        else return false;
    }

    // 访问队首
    int front() {
        if (empty()) {
            std::cout &lt;&lt; &quot;队列为空&quot; &lt;&lt; std::endl;
            return;
        }
        return nums[front];
    }

    // 访问队尾
    int back() {
        if (empty()) {
            std::cout &lt;&lt; &quot;队列为空&quot; &lt;&lt; std::endl;
            return;
        }
        return nums[front + queSize - 1];
    }

    // 入队
    void push(int num) {
        if (queSize == queCapacity) {
            std::cout &lt;&lt; &quot;队列已满&quot; &lt;&lt; std::endl;
            return;
        }

        int rear = (front + queSize) % queCapacity; // 取余：rear越过数组尾部回到头部
        nums[rear] = num;
        queSize++;
    }

    // 出队
    int pop() {
        if (empty()) {
            std::cout &lt;&lt; &quot;队列为空&quot; &lt;&lt; std::endl;
            return;
        }

        front = (front + 1) % queCapacity;	// 取余：front越过数组尾部回到头部
        queSize--;
    }
};
</code></pre>
<h2 id="stl-queue">STL queue</h2>
<p>C++ STL queue容器提供如下操作：</p>
<table>
<thead>
<tr>
<th>STL 函数</th>
<th>描述</th>
<th>操作时间复杂度</th>
</tr>
</thead>
<tbody>
<tr>
<td>empty()</td>
<td>判断队列是否为空</td>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mn>1</mn><mo>)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></td>
</tr>
<tr>
<td>size()</td>
<td>返回队列中元素的个数</td>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mn>1</mn><mo>)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></td>
</tr>
<tr>
<td>front()</td>
<td>返回队首元素</td>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mn>1</mn><mo>)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></td>
</tr>
<tr>
<td>back()</td>
<td>返回队尾元素</td>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mn>1</mn><mo>)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></td>
</tr>
<tr>
<td>push(element)</td>
<td>将元素压入队尾</td>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mn>1</mn><mo>)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></td>
</tr>
<tr>
<td>pop()</td>
<td>弹出队首元素。</td>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mn>1</mn><mo>)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></td>
</tr>
</tbody>
</table>
<h1 id="双向队列">双向队列</h1>
<p>不同于队列仅允许单进单出，双向队列（double-ended queue）允许在头部和尾部执行添加或删除操作，提供了更高的灵活性。</p>
<p>双向队列支持在队列的两端执行常数级别的增删操作，即时间复杂度为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mn>1</mn><mo>)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span>.</p>
<h2 id="双向队列常见应用场景">双向队列常见应用场景</h2>
<ul>
<li>滑动窗口算法：例如，在求解数组中连续子数组的最大和问题时，可以使用双向队列来存储当前窗口内的元素，通过不断地调整窗口的大小和更新队列中的元素，找到最大的子数组和；</li>
<li>设定上限的撤销与重做：考虑到系统资源限制，软件的撤销步数通常是有上限的，即软件需要在撤销队列的最底部（队首、栈底）删除最远的步数，但栈无法做到这一操作，这时便可以使用双向队列替代栈。</li>
</ul>
<h2 id="双向队列的两种实现方式">双向队列的两种实现方式</h2>
<p>对应地，双向队列可以使用双向链表进行实现，在两端同时设计添加和删除节点功能。</p>
<p>数组实现则可参考队列的环形数组实现方案，在单向队列的基础上增加头节点（队尾）的删除和尾节点（队首）的添加功能。</p>
<h2 id="stl-deque">STL deque</h2>
<p>C++ STL deque容器提供如下操作：</p>
<table>
<thead>
<tr>
<th>STL 函数</th>
<th>描述</th>
<th>操作时间复杂度</th>
</tr>
</thead>
<tbody>
<tr>
<td>empty()</td>
<td>判断双向队列是否为空</td>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mn>1</mn><mo>)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></td>
</tr>
<tr>
<td>size()</td>
<td>返回双向队列中元素的个数</td>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mn>1</mn><mo>)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></td>
</tr>
<tr>
<td>front()</td>
<td>返回双向队列的第一个元素的引用</td>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mn>1</mn><mo>)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></td>
</tr>
<tr>
<td>back()</td>
<td>返回双向队列的最后一个元素的引用</td>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mn>1</mn><mo>)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></td>
</tr>
<tr>
<td>push_front(element)</td>
<td>在双向队列的头部插入元素</td>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mn>1</mn><mo>)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></td>
</tr>
<tr>
<td>push_back(element)</td>
<td>在双向队列的尾部插入元素</td>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mn>1</mn><mo>)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></td>
</tr>
<tr>
<td>pop_front()</td>
<td>删除双向队列的第一个元素</td>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mn>1</mn><mo>)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></td>
</tr>
<tr>
<td>pop_back()</td>
<td>删除双向队列的最后一个元素</td>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mn>1</mn><mo>)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></td>
</tr>
</tbody>
</table>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[链表]]></title>
        <id>https://timestarry.github.io/post/ds-linklist/</id>
        <link href="https://timestarry.github.io/post/ds-linklist/">
        </link>
        <updated>2024-10-23T02:13:34.000Z</updated>
        <content type="html"><![CDATA[<h1 id="链表的基础知识">链表的基础知识</h1>
<ul>
<li>链表节点需存储值和一个next指针，所以在相同数据量下，链表比数组占用更多空间；</li>
<li>在链表中<strong>插入/删除</strong>元素的时间复杂度为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mn>1</mn><mo>)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span>；</li>
<li>在链表中<strong>访问/查找</strong>元素的时间复杂度为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>；</li>
</ul>
<h1 id="链表与数组">链表与数组</h1>
<table>
<thead>
<tr>
<th>对比项</th>
<th>数组</th>
<th>链表</th>
</tr>
</thead>
<tbody>
<tr>
<td>存储方式</td>
<td>连续的内存空间</td>
<td>非连续的内存空间，通过节点的指针连接</td>
</tr>
<tr>
<td>随机访问</td>
<td>支持随机访问，可以通过下标在 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mn>1</mn><mo>)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span> 时间内访问任意元素</td>
<td>不支持随机访问，访问特定元素需要从链表头开始遍历，时间复杂度为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></td>
</tr>
<tr>
<td>插入/删除操作</td>
<td>在中间位置插入或删除元素时，需要移动大量元素，时间复杂度为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></td>
<td>只需要修改指针，时间复杂度为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mn>1</mn><mo>)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span>（在已知节点位置的情况下）</td>
</tr>
<tr>
<td>内存分配</td>
<td>分配连续的大块内存，可能会出现内存不足导致分配失败的情况</td>
<td>按需分配内存，较为灵活</td>
</tr>
<tr>
<td>内存开销</td>
<td>除了存储数据本身，只需要少量额外的空间记录数组长度等信息</td>
<td>每个节点都需要额外的空间存储指针，内存开销相对较大</td>
</tr>
<tr>
<td>适用场景</td>
<td>适合频繁随机访问，元素数量相对固定的场景</td>
<td>适合频繁插入、删除操作，元素数量动态变化较大的场景</td>
</tr>
</tbody>
</table>
<h1 id="链表结构">链表结构</h1>
<h2 id="设计链表">设计链表</h2>
<p>设计链表包含这些关键元素：链表节点（值和next指针）、初始化构造函数、访问、插入、删除、遍历方法。</p>
<ul>
<li><a href="https://www.programmercarl.com/0707.%E8%AE%BE%E8%AE%A1%E9%93%BE%E8%A1%A8.html#%E7%AE%97%E6%B3%95%E5%85%AC%E5%BC%80%E8%AF%BE">设计链表-代码随想录 (programmercarl.com)</a></li>
<li><a href="https://leetcode.cn/problems/design-linked-list/description/">707. 设计链表 - 力扣（LeetCode）</a></li>
</ul>
<p>测试通过代码：</p>
<pre><code class="language-cpp">#include&lt;iostream&gt;

class MyLinkedList {

public:

    struct LinkedNode {
        int val;
        LinkedNode* next;

        LinkedNode() : val(0), next(nullptr) {};
        LinkedNode(int _val) :val(_val), next(nullptr) {};
    };

    MyLinkedList() {
        this-&gt;_dummyHead = new LinkedNode();
        this-&gt;_size = 0;
    }

    int get(int index) {
        if (index &lt; 0 || index &gt; _size - 1) {
            return -1;
        }

        LinkedNode* cur = _dummyHead-&gt;next;
        while (index--) {
            cur = cur-&gt;next;
        }
        return cur-&gt;val;
    }

    void addAtHead(int val) {
        LinkedNode* newNode = new LinkedNode(val);
        newNode-&gt;next = _dummyHead-&gt;next;
        _dummyHead-&gt;next = newNode;
        _size++;
    }

    void addAtTail(int val) {
        LinkedNode* newNode = new LinkedNode(val);

        LinkedNode* cur = _dummyHead;
        while (cur-&gt;next != nullptr) {
            cur = cur-&gt;next;
        }
        
        cur-&gt;next = newNode;
        _size++;
    }

    void addAtIndex(int index, int val) {
        if (index &lt; 0 || index &gt; _size) {
            return;
        }

        LinkedNode* newNode = new LinkedNode(val);
        LinkedNode* cur = _dummyHead;
        while (index--) {
            cur = cur-&gt;next;
            std::cout &lt;&lt;&quot;index = &quot; &lt;&lt; index &lt;&lt; &quot;cur-&gt;val =  &quot; &lt;&lt; cur-&gt;val&lt;&lt;std::endl;
        }

        newNode-&gt;next = cur-&gt;next;
        cur-&gt;next = newNode;
        _size++;
    }

    void deleteAtIndex(int index) {
        if (index &lt; 0 || index &gt; _size - 1) {
            return;
        }

        LinkedNode* cur = _dummyHead;
        while (index--) {
            cur = cur-&gt;next;
        }
        
        cur-&gt;next = cur-&gt;next-&gt;next;
        _size--;
    }

    void printLinkedList() {
        LinkedNode* cur = _dummyHead-&gt;next;

        while (cur) {
            std::cout &lt;&lt; cur-&gt;val &lt;&lt; &quot; &quot;;
            cur = cur-&gt;next;
        }
        std::cout &lt;&lt; std::endl;
        std::cout &lt;&lt; &quot;size:&quot; &lt;&lt; _size &lt;&lt; std::endl;
    }
private:
    LinkedNode* _dummyHead;
    int _size;
};
</code></pre>
<h2 id="常见链表结构">常见链表结构</h2>
<p>除了单链表外，还有两种常见的链表类型：</p>
<ul>
<li><strong>环形链表</strong>：链表的尾节点指向它的头节点，即可得到一个环形链表；在环形链表中，任意节点都可以被视为头节点；</li>
<li><strong>双向链表</strong>：不同于单链表，双向链表中还放有它前驱节点的pre指针，其遍历灵活性更强，但占用空间也更多。</li>
</ul>
<h1 id="常考题型">常考题型</h1>
<h2 id="链表成环">链表成环</h2>
<p><strong>力扣</strong>：<a href="https://leetcode.cn/problems/linked-list-cycle-ii/description/">142. 环形链表 II - 力扣（LeetCode）</a></p>
<p><strong>难度</strong>：中等</p>
<p><strong>考察重点</strong></p>
<ol>
<li>确认链表是否成环；</li>
<li>快指针追上慢指针的原理；</li>
<li>找到链表环的入口；</li>
<li>寻找入口过程中三个指针走过的路程涉及的数学关系。</li>
</ol>
<h2 id="合并链表">合并链表</h2>
<p><strong>力扣</strong>：<a href="https://leetcode.cn/problems/merge-two-sorted-lists/description/">21. 合并两个有序链表 - 力扣（LeetCode）</a></p>
<p><strong>难度</strong>：简单</p>
<p><strong>考察重点</strong></p>
<ol>
<li>双指针；</li>
<li>虚拟头节点；</li>
<li>递归或迭代。</li>
</ol>
<p><strong>拓展（困难）</strong>：<a href="https://leetcode.cn/problems/merge-k-sorted-lists/description/">23. 合并 K 个升序链表 - 力扣（LeetCode）</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[C++11智能指针]]></title>
        <id>https://timestarry.github.io/post/cpp11-smart-pointers/</id>
        <link href="https://timestarry.github.io/post/cpp11-smart-pointers/">
        </link>
        <updated>2024-10-23T00:31:40.000Z</updated>
        <content type="html"><![CDATA[<p>C++98中的<code>auto_ptr</code>存在诸多问题，未被广泛使用。在C++11标准库中真正引入了智能指针，包括<code>unique_ptr</code>，<code>shared_ptr</code>和<code>weak_ptr</code>，智能指针的设计初衷就是为了帮助开发者管理内存。</p>
<h1 id="unique_ptr">unique_ptr</h1>
<p><code>std::unique_ptr&lt;T&gt;</code>比<code>std::shared_ptr&lt;T&gt;</code>具有更小的内存，而且不需要维护引用计数，因此它的性能更好。当我们需要一个独占的指针时，应该优先使用<code>unique_ptr</code>。</p>
<h2 id="特性">特性</h2>
<p>字面意思，<code>unique_ptr</code>最大的特性就是独占所有权，即同一时间只能有一个 <code>unique_ptr</code> 拥有某个对象的所有权。它能够自动管理内存并在不再使用时释放资源，从而避免内存泄漏。</p>
<ol>
<li><strong>独占所有权</strong>：独占所指对象的所有权，不能共享；</li>
<li><strong>不能复制</strong>：禁止拷贝，确保了资源的唯一所有权；</li>
<li><strong>自动销毁</strong>：当 <code>unique_ptr</code> 离开其作用域时（如函数结束或对象被销毁），它会自动释放所指向的资源，不需要显式调用 <code>delete</code>；</li>
<li><strong>轻量高效</strong>：相比于 <code>shared_ptr</code>，<code>unique_ptr</code> 没有额外的引用计数开销。</li>
</ol>
<h2 id="特性实现">特性实现</h2>
<h3 id="独占所有权">独占所有权</h3>
<p><strong>禁止拷贝</strong>：</p>
<pre><code class="language-cpp">    // 删除了拷贝构造函数，确保同一时间只有一个 MyUniquePtr 对象拥有资源的所有权，防止拷贝操作
    MyUniquePtr(const MyUniquePtr&amp; other) = delete;
    
    // 删除了拷贝赋值操作符，确保不会通过赋值创建多个 MyUniquePtr 对象同时管理同一资源
    MyUniquePtr&amp; operator=(const MyUniquePtr&amp; other) = delete;
</code></pre>
<p><strong>移动语义</strong>：</p>
<pre><code class="language-cpp">    // 移动构造函数：转移所有权
    MyUniquePtr(MyUniquePtr&amp;&amp; other) noexcept : ptr(other.ptr) {
        other.ptr = nullptr;  // 将源指针置空，确保只有一个指针管理资源
    }

    MyUniquePtr&amp; operator=(MyUniquePtr&amp;&amp; other) noexcept {
        if (this != &amp;other) {  // 防止自我赋值
            delete ptr;         // 释放当前持有的资源
            ptr = other.ptr;    // 转移新资源的所有权
            other.ptr = nullptr; // 将源指针置空
        }
        return *this;
    }
</code></pre>
<h3 id="自动销毁">自动销毁</h3>
<p><strong>析构释放</strong>：</p>
<pre><code class="language-cpp">    // 析构函数：释放管理的资源
    ~MyUniquePtr() {
        delete ptr;  // 自动删除所管理的对象
    }
</code></pre>
<h3 id="访问对象">访问对象</h3>
<pre><code class="language-cpp">    // 重载 * 操作符，方便访问对象
    T&amp; operator*() const {
        return *ptr;
    }

    // 重载 -&gt; 操作符，方便访问对象的成员
    T* operator-&gt;() const {
        return ptr;
    }

    // 获取原始指针
    T* get() const {
        return ptr;
    }

    // 放弃所有权，不删除对象，并返回指针
    T* release() {
        T* temp = ptr;
        ptr = nullptr;
        return temp;
    }
</code></pre>
<h1 id="shared_ptr">shared_ptr</h1>
<p>通常用于一些资源创建昂贵比较耗时的场景， 比如涉及到文件读写、网络连接、数据库连接等。当需要共享资源的所有权时，例如，一个资源需要被多个对象共享，但是不知道哪个对象会最后释放它，这时候就可以使用<code>std::shared_ptr&lt;T&gt;</code>。</p>
<h2 id="特性-2">特性</h2>
<p>不同于unique，<code>shared_ptr</code>可以共享所有权，并引入了引用计数特性。</p>
<ol>
<li><strong>共享所有权</strong>：多个 <code>shared_ptr</code> 对象可以共享管理同一个资源；</li>
<li><strong>引用计数</strong>：维护一个引用计数，每当有新的 <code>shared_ptr</code> 复制或移动该资源时，引用计数会增加；当某个 <code>shared_ptr</code> 被销毁时，引用计数减少。只有当引用计数为零时，资源才会被释放；</li>
<li><strong>线程安全的引用计数</strong>：<code>shared_ptr</code> 的引用计数操作是线程安全的，因此它可以安全地在多线程环境下使用；</li>
<li><strong>联动<code>weak_ptr</code></strong>：与 <code>weak_ptr</code> 协作，防止循环引用的问题。</li>
</ol>
<h2 id="特性实现-2">特性实现</h2>
<h3 id="共享所有权">共享所有权</h3>
<p><code>MySharedPtr</code> 支持拷贝构造和赋值操作，通过增加引用计数实现共享所有权。</p>
<pre><code class="language-cpp">    // 拷贝构造函数，增加引用计数
    MySharedPtr(const MySharedPtr&amp; other) : ptr(other.ptr), ref_count(other.ref_count) {
        (*ref_count)++;  // 引用计数增加
        std::cout &lt;&lt; &quot;Copied shared_ptr, ref_count = &quot; &lt;&lt; *ref_count &lt;&lt; std::endl;
    }
</code></pre>
<h3 id="引用计数">引用计数</h3>
<p><code>ref_count</code> 用于跟踪有多少个 <code>MySharedPtr</code> 对象共享同一个资源。每当有新的 <code>MySharedPtr</code> 对象拷贝构造时，引用计数增加；当一个对象被销毁时，引用计数减少。</p>
<pre><code class="language-cpp">    // 构造函数
    explicit MySharedPtr(T* p = nullptr) : ptr(p), ref_count(new int(1)) {
        std::cout &lt;&lt; &quot;Created shared_ptr, ref_count = 1&quot; &lt;&lt; std::endl;
    }

    // 赋值运算符，处理引用计数
    MySharedPtr&amp; operator=(const MySharedPtr&amp; other) {
        if (this != &amp;other) {
            // 先减少当前对象的引用计数
            release();
            // 复制新对象的指针和引用计数
            ptr = other.ptr;
            ref_count = other.ref_count;
            (*ref_count)++;  // 引用计数增加
            std::cout &lt;&lt; &quot;Assigned shared_ptr, ref_count = &quot; &lt;&lt; *ref_count &lt;&lt; std::endl;
        }
        return *this;
    }
</code></pre>
<h3 id="线程安全">线程安全</h3>
<p><code>shared_ptr</code> 使用了<strong>原子操作</strong>来管理其引用计数。因此，当多个线程同时复制、销毁或重新赋值 <code>shared_ptr</code> 时，引用计数的增减操作是原子性的，不会发生竞态条件（race condition）。</p>
<h1 id="weak_ptr">weak_ptr</h1>
<p>常用于数据结构中防止 <code>shared_ptr</code> 之间的循环依赖。例如在树结构、图结构或观察者模式中，经常使用 <code>weak_ptr</code> 来防止内存泄漏。当你不希望影响对象生命周期，但需要临时访问某个对象时，可以使用 <code>weak_ptr</code>。</p>
<h2 id="特性-3">特性</h2>
<ol>
<li><strong>不影响引用计数</strong>：<code>weak_ptr</code> 不会增加 <code>shared_ptr</code> 的强引用计数。这意味着，即使有 <code>weak_ptr</code> 指向某个对象，当所有 <code>shared_ptr</code> 都销毁时，该对象仍然会被释放。</li>
<li><strong>避免循环引用</strong>：在复杂的数据结构中，两个对象可能互相引用。如果双方都使用 <code>shared_ptr</code>，则会产生循环引用，导致内存泄漏。使用 <code>weak_ptr</code> 可以解决这个问题，因为 <code>weak_ptr</code> 不会阻止对象的销毁。</li>
<li><strong>只能通过 <code>lock()</code> 获取对象</strong>：由于 <code>weak_ptr</code> 不直接拥有对象，它无法直接访问被引用的对象。需要调用 <code>lock()</code> 方法将其转换为 <code>shared_ptr</code>，这样可以确保在访问对象时对象仍然存在。</li>
</ol>
<h2 id="特性实现-3">特性实现</h2>
<h3 id="不影响生命周期">不影响生命周期</h3>
<p><code>weak_ptr</code> 和 <code>shared_ptr</code> 共享同一个控制块，这个控制块包含了两个计数器：</p>
<ul>
<li><strong>强引用计数</strong>：跟踪有多少个 <code>shared_ptr</code> 实例引用同一个对象。</li>
<li><strong>弱引用计数</strong>：跟踪有多少个 <code>weak_ptr</code> 引用该对象。</li>
</ul>
<p>控制块不仅存储对象的引用计数，还保存着对象的指针（对象的地址）。当 <code>shared_ptr</code> 引用的对象被销毁时，控制块不会立即被释放，因为 <code>weak_ptr</code> 可能还在使用它。</p>
<p><code>weak_ptr</code> 不会增加对象的强引用计数，因此它不会影响对象的生命周期。即使有多个 <code>weak_ptr</code> 引用该对象，当所有的 <code>shared_ptr</code> 被销毁时，强引用计数为 0，资源会被释放。</p>
<p>这通过引用计数的拆分实现，<code>weak_ptr</code> 只影响弱引用计数，不会干涉 <code>shared_ptr</code> 的强引用计数。</p>
<pre><code class="language-cpp">weak_ptr() : ptr_(nullptr), ref_count_(nullptr), weak_count_(nullptr) {}

    weak_ptr(const shared_ptr&lt;T&gt;&amp; sharedPtr) : ptr_(sharedPtr.ptr_), ref_count_(sharedPtr.ref_count_), weak_count_(sharedPtr.weak_count_) {
        if (weak_count_) (*weak_count_)++;
    }
</code></pre>
<h3 id="避免循环引用">避免循环引用</h3>
<p><code>weak_ptr</code> 最典型的用途是解决循环引用问题。在两个对象互相引用时，如果都使用 <code>shared_ptr</code>，对象将无法自动释放，因为它们的强引用计数永远不会降到 0。<code>weak_ptr</code> 通过不增加强引用计数来打破这个循环，使对象在强引用计数归零时能够被正确销毁。</p>
<h3 id="访问对象-2">访问对象</h3>
<p><code>weak_ptr</code> 没有直接访问对象的能力，需要通过 <code>lock()</code> 将自己转换为一个临时的 <code>shared_ptr</code> 来访问对象。</p>
<p><code>lock()</code> 的实现原理是检查<strong>强引用计数</strong>是否大于 0。如果大于 0，表示对象还存在，于是 <code>lock()</code> 返回一个新的 <code>shared_ptr</code>，并增加强引用计数；如果强引用计数为 0，<code>lock()</code> 返回一个空的 <code>shared_ptr</code>。</p>
<pre><code class="language-cpp">    shared_ptr&lt;T&gt; lock() const {
        // 检查强引用计数是否大于 0，如果大于 0，表示对象仍然存在
        if (ref_count_ &amp;&amp; *ref_count_ &gt; 0) {
            return shared_ptr&lt;T&gt;(*this);  // 创建并返回一个新的 shared_ptr
        }
        return shared_ptr&lt;T&gt;(nullptr);    // 否则返回一个空的 shared_ptr
    }
</code></pre>
<h1 id="参考阅读">参考阅读</h1>
<ul>
<li><a href="https://zhuanlan.zhihu.com/p/436290273">C++ 智能指针最佳实践&amp;源码分析 - 知乎 (zhihu.com)</a></li>
<li><a href="https://cplusplus.com/reference/memory/">cplusplus.com/reference/memory/</a></li>
<li><a href="https://www.cnblogs.com/qiangz/p/17911186.html">万字长文全面详解现代C++智能指针：原理、应用和陷阱 - 七昂的技术之旅 - 博客园 (cnblogs.com)</a></li>
</ul>
]]></content>
    </entry>
</feed>